from app.extensions import db
from datetime import datetime, timezone
from app.enums import ContractTypeEnum, ProposalStatusEnum


class Proposal(db.Model):
    __tablename__ = 'proposals'

    id = db.Column(db.Integer, primary_key=True)  # Unique ID for each proposal

    # Foreign Keys
    job_id = db.Column(db.Integer, db.ForeignKey('upwork_jobs.id'), nullable=False)  # Link to scraped Upwork job
    profile_id = db.Column(db.Integer, db.ForeignKey('upwork_profiles.id'), nullable=False)  # Which Upwork profile was used
    generated_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # User who generated the proposal (usually salesman)

    # Proposal & Submission Info
    cover_letter = db.Column(db.Text, nullable=True)  # AI-generated cover letter to be sent
    feasibility_score = db.Column(db.Float, nullable=True)  # AI-generated score (e.g. 85.0 for good opportunity)
    feasibility_reason = db.Column(db.Text, nullable=True)  # Why AI marked this job feasible or not
    status = db.Column(db.Enum(ProposalStatusEnum), default=ProposalStatusEnum.draft, nullable=False)  # Proposal state
    connects_required = db.Column(db.Integer, nullable=True)  # How many connects the job required
    expected_cost = db.Column(db.Numeric(10, 2), nullable=True)  # Estimated cost to deliver project
    expected_earnings = db.Column(db.Numeric(10, 2), nullable=True)  # Estimated earnings from this job
    sent_at = db.Column(db.DateTime(timezone=True), nullable=True)  # When the proposal was sent to the client

    # AI Analysis Fields
    job_description = db.Column(db.Text, nullable=True)  # Full raw job description text
    summary = db.Column(db.Text, nullable=True)  # Short summary generated by AI
    risks = db.Column(db.JSON, nullable=True)  # Risks identified by AI (e.g. unclear scope)
    opportunities = db.Column(db.JSON, nullable=True)  # Opportunities (e.g. client hires frequently)
    recommendations = db.Column(db.JSON, nullable=True)  # AI suggestions on bidding or approach
    key_clauses = db.Column(db.JSON, nullable=True)  # Important clauses or expectations in job
    legal_compliance = db.Column(db.Text, nullable=True)  # Does it comply with platform rules or legal norms
    negotiation_points = db.Column(db.JSON, nullable=True)  # What can be negotiated (e.g. timeline, cost)
    project_duration = db.Column(db.String(100), nullable=True)  # Estimated or mentioned duration (e.g. "6 weeks")
    overall_score = db.Column(db.Float, nullable=True)  # AI confidence score in the job's quality (e.g. 92.0)
    performance_metrics = db.Column(db.JSON, nullable=True)  # Expected deliverables or KPIs
    intellectual_property_clauses = db.Column(db.Text, nullable=True)  # Ownership or licensing terms
    contract_type = db.Column(db.Enum(ContractTypeEnum), default=ContractTypeEnum.unknown)  # Type of contract (Fixed Price, Hourly, etc.)

    # Manual Feedback
    user_feedback_rating = db.Column(db.Integer, nullable=True)  # Salesman's or manager's 1â€“5 rating
    user_feedback_comments = db.Column(db.Text, nullable=True)  # Their comments on AI proposal or job

    # Other Info
    tags = db.Column(db.JSON, nullable=True)  # Skills or keywords extracted from job
    client_score = db.Column(db.Float, nullable=True)  # Score based on client history, rating, etc.
    job_tags = db.Column(db.JSON, nullable=True)  # Tags extracted from job for filtering/sorting
    is_follow_up_required = db.Column(db.Boolean, default=False)  # Flag for follow-up if no client response
    version = db.Column(db.Integer, default=1)  # Track version of proposal if edited
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)  # Timestamp when proposal was created

    # Relationships
    job = db.relationship('UpworkJob', backref=db.backref('proposals', cascade='all, delete-orphan'))
    profile = db.relationship('UpworkProfile', backref=db.backref('proposals', cascade='all, delete-orphan'))
    creator = db.relationship('User', backref=db.backref('proposals', cascade='all, delete-orphan'))

    def __repr__(self):
        return f"<Proposal {self.id} - Job {self.job_id}>"