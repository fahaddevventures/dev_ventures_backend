from app.extensions import db
from datetime import datetime, timezone
from app.enums import ContractTypeEnum, ProposalStatusEnum


class Proposal(db.Model):
    __tablename__ = 'proposals'

    id = db.Column(db.Integer, primary_key=True)  # Unique ID for each proposal

    # Foreign Keys
    job_id = db.Column(db.Integer, db.ForeignKey('upwork_jobs.id'), nullable=False)  # Link to scraped Upwork job
    generated_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # User who generated the proposal (usually salesman)

    # Proposal & Submission Info
    cover_letter = db.Column(db.Text, nullable=True)  # AI-generated cover letter to be sent
    proposal = db.Column(db.Text, nullable=False)  # Full raw job proposal text
    feasibility_score = db.Column(db.Float, nullable=True)  # AI-generated score (e.g. 85.0 for good opportunity)
    feasibility_reason = db.Column(db.Text, nullable=True)  # Why AI marked this job feasible or not
    status = db.Column(db.Enum(ProposalStatusEnum), default=ProposalStatusEnum.draft, nullable=False)  # Proposal state
    connects_required = db.Column(db.Integer, nullable=True)  # How many connects the job required
    expected_cost = db.Column(db.Numeric(10, 2), nullable=True)  # Estimated cost to deliver project
    expected_earnings = db.Column(db.Numeric(10, 2), nullable=True)  # Estimated earnings from this job

    # AI Analysis Fields
    job_description = db.Column(db.Text, nullable=True)  # Full raw job description text
    summary = db.Column(db.Text, nullable=True)  # Short summary generated by AI
    project_duration = db.Column(db.String(100), nullable=True)  # Estimated or mentioned duration (e.g. "6 weeks")
    overall_score = db.Column(db.Float, nullable=True)  # AI confidence score in the job's quality (e.g. 92.0)

    # Other Info
    tags = db.Column(db.JSON, nullable=True)  # Skills or keywords extracted from job
    created_at = db.Column(db.DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)  # Timestamp when proposal was created

    # Relationships
    job = db.relationship('UpworkJob', backref=db.backref('proposals', cascade='all, delete-orphan'))
    creator = db.relationship('User', backref=db.backref('proposals', cascade='all, delete-orphan'))

    def __repr__(self):
        return f"<Proposal {self.id} - Job {self.job_id}>"